# Generated by Django 5.2.3 on 2025-07-29 17:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PatientProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_progress_rating', models.IntegerField(help_text='Overall progress rating (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('mood_trend', models.CharField(choices=[('improving', 'Improving'), ('stable', 'Stable'), ('declining', 'Declining'), ('fluctuating', 'Fluctuating')], max_length=20)),
                ('goals_achieved', models.TextField(blank=True, null=True)),
                ('current_challenges', models.TextField(blank=True, null=True)),
                ('next_milestones', models.TextField(blank=True, null=True)),
                ('assessment_date', models.DateField()),
                ('sessions_completed', models.IntegerField(default=0)),
                ('therapist_notes', models.TextField(blank=True, null=True)),
                ('patient_feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_progress_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_progress',
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_number', models.PositiveIntegerField(help_text='Sequential session number for this patient')),
                ('session_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group'), ('family', 'Family'), ('couples', 'Couples'), ('assessment', 'Assessment'), ('follow_up', 'Follow-up')], default='individual', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.IntegerField(default=60)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('location', models.CharField(blank=True, help_text='Session location or platform', max_length=200, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('session_notes', models.TextField(blank=True, help_text="Therapist's session notes", null=True)),
                ('patient_goals', models.TextField(blank=True, help_text='Goals discussed in session', null=True)),
                ('homework_assigned', models.TextField(blank=True, help_text='Homework or tasks assigned', null=True)),
                ('next_session_goals', models.TextField(blank=True, help_text='Goals for next session', null=True)),
                ('patient_mood_before', models.IntegerField(blank=True, choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Below Average'), (4, 'Fair'), (5, 'Average'), (6, 'Good'), (7, 'Very Good'), (8, 'Great'), (9, 'Excellent'), (10, 'Outstanding')], help_text="Patient's mood rating before session (1-10)", null=True)),
                ('patient_mood_after', models.IntegerField(blank=True, choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Below Average'), (4, 'Fair'), (5, 'Average'), (6, 'Good'), (7, 'Very Good'), (8, 'Great'), (9, 'Excellent'), (10, 'Outstanding')], help_text="Patient's mood rating after session (1-10)", null=True)),
                ('therapist_observations', models.TextField(blank=True, null=True)),
                ('session_effectiveness', models.IntegerField(blank=True, help_text="Therapist's rating of session effectiveness (1-10)", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('consent_recording', models.BooleanField(default=False, help_text='Patient consented to recording')),
                ('consent_ai_analysis', models.BooleanField(default=False, help_text='Patient consented to AI analysis')),
                ('fee_charged', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partial', 'Partial'), ('waived', 'Waived'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_sessions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_sessions', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sessions',
                'ordering': ['-scheduled_date'],
                'unique_together': {('patient', 'therapist', 'session_number')},
            },
        ),
        migrations.CreateModel(
            name='SessionAudio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(upload_to='session_audio/')),
                ('file_size', models.BigIntegerField()),
                ('duration_seconds', models.IntegerField()),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio_files', to='therapy_sessions.session')),
            ],
            options={
                'db_table': 'session_audio',
            },
        ),
        migrations.CreateModel(
            name='SessionInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_mood', models.CharField(blank=True, max_length=50, null=True)),
                ('mood_score', models.FloatField(blank=True, null=True)),
                ('key_themes', models.JSONField(default=list)),
                ('emotional_patterns', models.JSONField(default=dict)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='therapy_sessions.session')),
            ],
            options={
                'db_table': 'session_insights',
            },
        ),
        migrations.CreateModel(
            name='SessionQRCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='qr_code', to='therapy_sessions.session')),
            ],
            options={
                'db_table': 'session_qr_codes',
            },
        ),
        migrations.CreateModel(
            name='SessionReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('call', 'Phone Call')], max_length=20)),
                ('send_at', models.DateTimeField(help_text='When to send the reminder')),
                ('hours_before', models.IntegerField(help_text='Hours before session to send reminder')),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivery_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('custom_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='therapy_sessions.session')),
            ],
            options={
                'db_table': 'session_reminders',
            },
        ),
        migrations.CreateModel(
            name='SessionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=200)),
                ('session_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group'), ('family', 'Family'), ('couples', 'Couples'), ('assessment', 'Assessment'), ('follow_up', 'Follow-up')], default='individual', max_length=20)),
                ('duration_minutes', models.IntegerField(default=60)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('weekly', 'Weekly'), ('biweekly', 'Biweekly'), ('monthly', 'Monthly')], max_length=20, null=True)),
                ('default_goals', models.TextField(blank=True, null=True)),
                ('default_notes_template', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_session_templates', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_session_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'session_templates',
                'unique_together': {('therapist', 'patient', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TherapistAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('max_sessions', models.IntegerField(default=1, help_text='Maximum sessions in this slot')),
                ('session_duration', models.IntegerField(default=60, help_text='Default session duration in minutes')),
                ('effective_from', models.DateField(blank=True, null=True)),
                ('effective_until', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('is_online_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'therapist_availability',
                'unique_together': {('therapist', 'day_of_week', 'start_time', 'end_time')},
            },
        ),
    ]
