# MindScribe Django Models Schema
# This schema supports the therapy session management platform
# with SOAP note generation, transcription, and patient management

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid


# ================================
# USERS MODULE MODELS
# ================================

class User(AbstractUser):
    """Extended user model for therapists and administrators"""
    
    USER_TYPES = (
        ('therapist', 'Therapist'),
        ('admin', 'Administrator'),
        ('supervisor', 'Supervisor'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user_type = models.CharField(max_length=20, choices=USER_TYPES, default='therapist')
    license_number = models.CharField(max_length=50, unique=True, null=True, blank=True)
    specialization = models.CharField(max_length=100, blank=True)
    phone_number = models.CharField(max_length=20, blank=True)
    profile_picture = models.ImageField(upload_to='profile_pics/', null=True, blank=True)
    is_verified = models.BooleanField(default=False)
    timezone = models.CharField(max_length=50, default='UTC')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Dr. {self.first_name} {self.last_name}"


class Patient(models.Model):
    """Patient model for managing therapy clients"""
    
    STATUS_CHOICES = (
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('high_risk', 'High Risk'),
        ('new', 'New'),
    )
    
    GENDER_CHOICES = (
        ('male', 'Male'),
        ('female', 'Female'),
        ('other', 'Other'),
        ('prefer_not_to_say', 'Prefer not to say'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    therapist = models.ForeignKey(User, on_delete=models.CASCADE, related_name='patients')
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    date_of_birth = models.DateField()
    gender = models.CharField(max_length=20, choices=GENDER_CHOICES)
    phone_number = models.CharField(max_length=20, blank=True)
    email = models.EmailField(blank=True)
    address = models.TextField(blank=True)
    emergency_contact_name = models.CharField(max_length=100, blank=True)
    emergency_contact_phone = models.CharField(max_length=20, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='new')
    preferred_language = models.CharField(max_length=20, default='english')
    diagnosis = models.TextField(blank=True)
    medical_history = models.TextField(blank=True)
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    @property
    def age(self):
        return timezone.now().date().year - self.date_of_birth.year
    
    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"
    
    def __str__(self):
        return f"{self.full_name} (Age: {self.age})"


# ================================
# THERAPY SESSIONS MODULE MODELS
# ================================

class TherapySession(models.Model):
    """Main therapy session model"""
    
    SESSION_STATUS = (
        ('scheduled', 'Scheduled'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
        ('no_show', 'No Show'),
    )
    
    SESSION_TYPES = (
        ('individual', 'Individual'),
        ('group', 'Group'),
        ('family', 'Family'),
        ('couples', 'Couples'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    therapist = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sessions')
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='sessions')
    session_number = models.PositiveIntegerField()
    session_type = models.CharField(max_length=20, choices=SESSION_TYPES, default='individual')
    scheduled_date = models.DateTimeField()
    start_time = models.DateTimeField(null=True, blank=True)
    end_time = models.DateTimeField(null=True, blank=True)
    duration_minutes = models.PositiveIntegerField(null=True, blank=True)
    status = models.CharField(max_length=20, choices=SESSION_STATUS, default='scheduled')
    location = models.CharField(max_length=100, blank=True)
    session_notes = models.TextField(blank=True)
    homework_assigned = models.TextField(blank=True)
    next_session_goals = models.TextField(blank=True)
    patient_mood_rating = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        null=True, blank=True
    )
    therapist_observations = models.TextField(blank=True)
    consent_recording = models.BooleanField(default=False)
    consent_ai_analysis = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['patient', 'session_number']
        ordering = ['-scheduled_date']
    
    def __str__(self):
        return f"Session #{self.session_number} - {self.patient.full_name}"


# ================================
# TRANSCRIPTION MODULE MODELS
# ================================

class AudioFile(models.Model):
    """Audio file storage for session recordings"""
    
    PROCESSING_STATUS = (
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    session = models.ForeignKey(TherapySession, on_delete=models.CASCADE, related_name='audio_files')
    file_path = models.FileField(upload_to='audio_recordings/')
    file_name = models.CharField(max_length=255)
    file_size = models.BigIntegerField()
    duration_seconds = models.PositiveIntegerField(null=True, blank=True)
    format = models.CharField(max_length=10)
    sample_rate = models.IntegerField(null=True, blank=True)
    processing_status = models.CharField(max_length=20, choices=PROCESSING_STATUS, default='pending')
    upload_timestamp = models.DateTimeField(auto_now_add=True)
    processed_timestamp = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"Audio: {self.file_name} - {self.session}"


class Transcription(models.Model):
    """Transcription results from audio processing"""
    
    LANGUAGE_CHOICES = (
        ('english', 'English'),
        ('urdu', 'Urdu'),
        ('mixed', 'Mixed'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    session = models.ForeignKey(TherapySession, on_delete=models.CASCADE, related_name='transcriptions')
    audio_file = models.ForeignKey(AudioFile, on_delete=models.CASCADE, related_name='transcriptions')
    raw_text = models.TextField()
    processed_text = models.TextField(blank=True)
    language_detected = models.CharField(max_length=20, choices=LANGUAGE_CHOICES)
    confidence_score = models.FloatField(validators=[MinValueValidator(0.0), MaxValueValidator(1.0)])
    speaker_labels = models.JSONField(default=dict, blank=True)
    timestamps = models.JSONField(default=dict, blank=True)
    word_count = models.PositiveIntegerField(default=0)
    processing_time_seconds = models.FloatField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Transcription for {self.session} - {self.language_detected}"


# ================================
# SOAP MODULE MODELS
# ================================

class SOAPNote(models.Model):
    """SOAP (Subjective, Objective, Assessment, Plan) notes generation"""
    
    GENERATION_STATUS = (
        ('pending', 'Pending'),
        ('generating', 'Generating'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('reviewed', 'Reviewed'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    session = models.OneToOneField(TherapySession, on_delete=models.CASCADE, related_name='soap_note')
    transcription = models.ForeignKey(Transcription, on_delete=models.CASCADE, related_name='soap_notes')
    
    # SOAP Components
    subjective = models.TextField(help_text="Patient's subjective experience and reported symptoms")
    objective = models.TextField(help_text="Therapist's objective observations")
    assessment = models.TextField(help_text="Clinical assessment and diagnosis")
    plan = models.TextField(help_text="Treatment plan and next steps")
    
    # Metadata
    generation_status = models.CharField(max_length=20, choices=GENERATION_STATUS, default='pending')
    ai_confidence_score = models.FloatField(
        validators=[MinValueValidator(0.0), MaxValueValidator(1.0)],
        null=True, blank=True
    )
    manual_review_required = models.BooleanField(default=True)
    reviewed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    reviewed_at = models.DateTimeField(null=True, blank=True)
    
    # AI Analysis Results
    sentiment_analysis = models.JSONField(default=dict, blank=True)
    key_themes = models.JSONField(default=list, blank=True)
    emotional_indicators = models.JSONField(default=dict, blank=True)
    risk_assessment = models.JSONField(default=dict, blank=True)
    
    generated_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"SOAP Note - {self.session}"


# ================================
# HISTORY MODULE MODELS
# ================================

class PatientHistory(models.Model):
    """Patient treatment history and progress tracking"""
    
    ENTRY_TYPES = (
        ('session_summary', 'Session Summary'),
        ('mood_tracking', 'Mood Tracking'),
        ('medication_change', 'Medication Change'),
        ('diagnosis_update', 'Diagnosis Update'),
        ('treatment_plan_update', 'Treatment Plan Update'),
        ('crisis_intervention', 'Crisis Intervention'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='history')
    session = models.ForeignKey(TherapySession, on_delete=models.CASCADE, null=True, blank=True)
    entry_type = models.CharField(max_length=30, choices=ENTRY_TYPES)
    title = models.CharField(max_length=200)
    description = models.TextField()
    mood_rating = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        null=True, blank=True
    )
    medications = models.JSONField(default=list, blank=True)
    attachments = models.JSONField(default=list, blank=True)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.patient.full_name} - {self.entry_type} - {self.created_at.date()}"


class MoodTracking(models.Model):
    """Mood tracking for patients over time"""
    
    MOOD_CATEGORIES = (
        ('anxiety', 'Anxiety'),
        ('depression', 'Depression'),
        ('anger', 'Anger'),
        ('joy', 'Joy'),
        ('stress', 'Stress'),
        ('energy', 'Energy'),
        ('sleep_quality', 'Sleep Quality'),
        ('social_connection', 'Social Connection'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='mood_entries')
    session = models.ForeignKey(TherapySession, on_delete=models.CASCADE, null=True, blank=True)
    category = models.CharField(max_length=20, choices=MOOD_CATEGORIES)
    rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)])
    notes = models.TextField(blank=True)
    recorded_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-recorded_at']
    
    def __str__(self):
        return f"{self.patient.full_name} - {self.category}: {self.rating}"


# ================================
# CORE MODULE MODELS
# ================================

class SystemSettings(models.Model):
    """System-wide configuration settings"""
    
    key = models.CharField(max_length=100, unique=True)
    value = models.TextField()
    description = models.TextField(blank=True)
    updated_by = models.ForeignKey(User, on_delete=models.CASCADE)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Setting: {self.key}"


class AuditLog(models.Model):
    """Audit logging for compliance and security"""
    
    ACTION_TYPES = (
        ('create', 'Create'),
        ('update', 'Update'),
        ('delete', 'Delete'),
        ('view', 'View'),
        ('login', 'Login'),
        ('logout', 'Logout'),
        ('export', 'Export'),
        ('import', 'Import'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='audit_logs')
    action_type = models.CharField(max_length=20, choices=ACTION_TYPES)
    model_name = models.CharField(max_length=100)
    object_id = models.CharField(max_length=100, blank=True)
    description = models.TextField()
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField(blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-timestamp']
    
    def __str__(self):
        return f"{self.user} - {self.action_type} - {self.model_name}"


# ================================
# NOTIFICATION AND ALERT MODELS
# ================================

class Notification(models.Model):
    """System notifications for users"""
    
    NOTIFICATION_TYPES = (
        ('session_reminder', 'Session Reminder'),
        ('soap_note_ready', 'SOAP Note Ready'),
        ('patient_mood_alert', 'Patient Mood Alert'),
        ('system_update', 'System Update'),
        ('security_alert', 'Security Alert'),
    )
    
    PRIORITY_LEVELS = (
        ('low', 'Low'),
        ('medium', 'Medium'),
        ('high', 'High'),
        ('urgent', 'Urgent'),
    )
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')
    type = models.CharField(max_length=30, choices=NOTIFICATION_TYPES)
    title = models.CharField(max_length=200)
    message = models.TextField()
    priority = models.CharField(max_length=10, choices=PRIORITY_LEVELS, default='medium')
    is_read = models.BooleanField(default=False)
    action_url = models.URLField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    read_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user} - {self.title}"